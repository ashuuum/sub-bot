from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from datetime import datetime
from core.app import get_subscriptions_db, update_subscription_db
from core.keyboards import get_main_keyboard


router = Router()

# –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫: user_id -> old_name
edit_sessions: dict[int, str] = {}


# --- –•–µ–Ω–¥–ª–µ—Ä: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É" ---
@router.message(F.text == "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É")
async def edit_subscription(message: Message):
    user_id = message.from_user.id
    subscriptions = await get_subscriptions_db(user_id)

    if subscriptions:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text=sub[0], callback_data=f"edit_{sub[0]}")] for sub in subscriptions
        ])
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:", reply_markup=keyboard)
    else:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫", reply_markup=get_main_keyboard())


# --- –•–µ–Ω–¥–ª–µ—Ä: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É ---
@router.callback_query(F.data.startswith("edit_"))
async def process_edit_subscription(call: CallbackQuery):
    user_id = call.from_user.id
    old_name = call.data.replace("edit_", "")
    edit_sessions[user_id] = old_name  # —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É

    await call.message.answer(
        f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ '{old_name}' –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n\n"
        f"`–∏–º—è, —Å—Ç–æ–∏–º–æ—Å—Ç—å, –¥–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è (–î–î.–ú–ú.–ì–ì–ì–ì)`",
        parse_mode="Markdown"
    )


# --- –•–µ–Ω–¥–ª–µ—Ä: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤—ë–ª –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ (–µ—Å–ª–∏ –∞–∫—Ç–∏–≤–Ω–∞ —Å–µ—Å—Å–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è) ---
@router.message()
async def handle_edit_data(message: Message):
    user_id = message.from_user.id

    if user_id not in edit_sessions:
        return  # –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏ ‚Äî –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º

    old_name = edit_sessions.pop(user_id)

    try:
        name, cost, end_date = map(str.strip, message.text.split(","))
        cost = int(cost)
        end_date_fmt = datetime.strptime(end_date, "%d.%m.%Y").strftime("%Y-%m-%d")

        await update_subscription_db(user_id, old_name, name, cost, end_date_fmt)

        await message.answer(
            f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞:\n"
            f"üìå *{name}*\nüí∏ {cost} —Ä—É–±.\nüìÖ –¥–æ {end_date}",
            parse_mode="Markdown",
            reply_markup=get_main_keyboard()
        )
    except Exception as e:
        print(f"[ERROR] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞: –∏–º—è, —Å—Ç–æ–∏–º–æ—Å—Ç—å, –¥–∞—Ç–∞ (–î–î.–ú–ú.–ì–ì–ì–ì)")
